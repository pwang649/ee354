KCPSM6 Assembler log file for program 'C:\Users\simonto\Divider_Pico_N4_8bit\assembly\prom_divider_8.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 20 Oct 2022
Assembly timestamp: 19:00:45

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 018 hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 25
Memory locations available: 4071


Assembly listing

 Addr Code                  Instruction

 000                        ; KCPSM6 Program
 000                        ;Author         - Vikram & Chethan
 000                        ;revised in Fall 2020, Spring 2021  - Gandhi 10/3/2020, 3/14/2021
 000                        ;File     - prom_divider_8.psm (copy of prom_divider_4.psm for students to revise)
 000                        ;**************************************************************************************
 000                        ;Port definitions
 000                        ;**************************************************************************************
 000                        ; ********* TODO *********
 000                        ; You need three read ports instead of two read ports.
 000                        ; You need three write ports instead of two write ports.
 000                        ; Change the following 4 lines appropriately
 000                        CONSTANT Dividend_port, 00'd                      ;port00 used for loading info of Dividend and Divisor
 000                        CONSTANT Divisor_port, 10'd
 000                        CONSTANT Control_signal_port, 01'd                ;port01 used for loading info of Start and ACK signals
 000                        CONSTANT Quotient_port, 00'd                      ;port00 used for outputting Quotient and Remainder
 000                        CONSTANT Remainder_port, 10'd
 000                        CONSTANT Current_State_port, 01'd                 ;port01 used for outputting current state info (Done (QD), Compute (QC), Initial (QI), and Done) to LEDs
 000                        ; Current State format from divider_8_top.v
 000                        ;   Done <= out_port[0];
 000                        ;   Qi <= out_port[1];
 000                        ;   Qc <= out_port[2];
 000                        ;   Qd <= out_port[3];
 000                        CONSTANT Report_Qi, 00000010'b
 000                        CONSTANT Report_Qc, 00000100'b
 000                        CONSTANT Report_Qd_Done, 00001001'b
 000                        ; ********* TODO *********
 000                        ; Change the following two lines appropriately
 000                        ; Control signal format from divider_4_top.v
 000                        ;           1'b1 : in_port <= {6'b000000,Start,Ack};
 000                        CONSTANT Mask_to_check_Start, 00000010'b
 000                        CONSTANT Mask_to_check_Ack, 00000001'b
 000                        ;**************************************************************************************
 000                        ; Special Register usage
 000                        ;**************************************************************************************
 000                        ;NAMEREG Not used here (reference page 53 in User guide Picoblaze_KCPSM6_Release9_30Sept14)
 000                        ;   One could rename registers as shown below, but I felt, it is not good to rename everything.
 000                        ;NAMEREG s0 Dividend_s0
 000                        ;NAMEREG s1 Divisor_s1
 000                        ;NAMEREG s2 Quotient_s2
 000                        ;NAMEREG s3 Remainder_s3
 000                        ;NAMEREG s4 Control_s4
 000                        ;NAMEREG sA Quotient_Remainder_sA
 000                        ;**************************************************************************************
 000                        ;MAIN PROGRAM
 000                        ;**************************************************************************************
 000                        ; ********* TODO *********
 000                        ; Go through the code for each of the three states and revise them appropriately.
 000                        ; Since you do not need to concatenate two 4-bit items here, probably you do not need
 000                        ; "OR" instruction or teh sA register in this .psm file.
 000                        ; Try to use s0 for Dividend, s1 for Divisor, s2 for Quotient and s4 for Control
 000                        ;Control Signal Format in s4 {6'b000000, Start, Ack}
 000  2B021  state_initial: OUTPUTK 02[Report_Qi], 1[Current_State_port]      ; Indicating Current State as Initial State (QI)
 001  09000                 INPUT s0, 00[Dividend_port]                       ; Register s0 holds Dividend(X), Divisor(Y)
 002  0910A                 INPUT s1, 0A[Divisor_port]
 003  01200                 LOAD s2, 00                                       ; Quotient Counter in the upper 4 bits of s2
 004  01300                 LOAD s3, 00
 005  2D000                 OUTPUT s0, 00[Quotient_port]                      ; Sending out initial Quotient and Remainder (Dividend(X)) to fabric logic
 006  2D10A                 OUTPUT s1, 0A[Remainder_port]
 007  09401                 INPUT s4, 01[Control_signal_port]                 ; Load the Control Signal Information into register s4
 008  03402                 AND s4, 02[Mask_to_check_Start]                   ; Check to see if Start Control Signal is set using 00000010'b Mask
 009  32000                 JUMP Z, 000[state_initial]                        ; Jump back to state_initial if Start signal did not go active
 00A  2200B                 JUMP 00B[state_compute]                           ; Jump to Compute State if Start (BtnL) is pressed
 00B                        ;***************************************************************************************
 00B                        ;Compute State (Division Sequence)
 00B                        ;****************************************************************************************
 00B  2B041  state_compute: OUTPUTK 04[Report_Qc], 1[Current_State_port]      ; Indicating Current State as Compute State (QC)
 00C  2D200                 OUTPUT s2, 00[Quotient_port]                      ; Sending out Quotient and Remainder (Dividend(X)) to the fabric logic
 00D  1C010                 COMPARE s0, s1                                    ; Compare Dividend and Divisor to check if Dividend is smaller than Divisor
 00E  3A012                 JUMP C, 012[state_done]                           ; If Dividend is smaller, jump to Done State (QD)
 00F  18010                 SUB s0, s1                                        ; Subtract Divisor from Dividend
 010  11201                 ADD s2, 01                                        ; Increment Quotient (in the upper fours bits of s2) after each repetitive Subtraction by adding 0001_0000 ( = 16) to s2
 011  2200B                 JUMP 00B[state_compute]                           ; If Dividend is not smaller, stay in Compute State (QC)
 012                        ;****************************************************************************************
 012                        ;Done State
 012                        ;****************************************************************************************
 012  2B091     state_done: OUTPUTK 09[Report_Qd_Done], 1[Current_State_port] ; Indicating Current State as Done State and also the Done signal (QD, Done)
 013  2D200                 OUTPUT s2, 00[Quotient_port]                      ; Sending out Quotient and Remainder to the fabric logic
 014  2D00A                 OUTPUT s0, 0A[Remainder_port]
 015  09401                 INPUT s4, 01[Control_signal_port]                 ; Load the Control Signal Information into register s4
 016  03401                 AND s4, 01[Mask_to_check_Ack]                     ; Check to see if ACK is received
 017  32012                 JUMP Z, 012[state_done]                           ; Jump to state_initial if ACK is received
 018  22000                 JUMP 000[state_initial]                           ; Stay in Done State till ACK comes (until BtnR is pressed)
 019                        ;**************************************************************************************
 019                        ;Interrupt Vector
 019                        ;**************************************************************************************
 019                        ;Not used here
 019                        ;ADDRESS 3FF


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\Users\simonto\Divider_Pico_N4_8bit\assembly\prom_divider_8.psm



List of defined constants

 CONSTANT name       Value        Source PSM File

 timestamp_hours     19'd         
 timestamp_minutes   00'd         
 timestamp_seconds   45'd         
 datestamp_year      22'd         
 datestamp_month     10'd         
 datestamp_day       20'd         
 NUL                 00           
 BEL                 07           
 BS                  08           
 HT                  09           
 LF                  0A           
 VT                  0B           
 CR                  0D           
 ESC                 1B           
 DEL                 7F           
 DCS                 90           
 ST                  9C           
 Dividend_port       00'd         prom_divider_8.psm
 Divisor_port        10'd         prom_divider_8.psm
 Control_signal_port 01'd         prom_divider_8.psm
 Quotient_port       00'd         prom_divider_8.psm
 Remainder_port      10'd         prom_divider_8.psm
 Current_State_port  01'd         prom_divider_8.psm
 Report_Qi           00000010'b   prom_divider_8.psm
 Report_Qc           00000100'b   prom_divider_8.psm
 Report_Qd_Done      00001001'b   prom_divider_8.psm
 Mask_to_check_Start 00000010'b   prom_divider_8.psm
 Mask_to_check_Ack   00000001'b   prom_divider_8.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "20 Oct 2022"  
 timestamp$        "19:00:45"     



List of line labels

   Label           Addr  Source PSM File

   state_initial   000   prom_divider_8.psm
   state_compute   00B   prom_divider_8.psm
   state_done      012   prom_divider_8.psm



Instruction usage statistics

 Instruction    Instances

 LOAD              2
 STAR              -

 AND               2
 OR                -
 XOR               -

 ADD               1
 ADDCY             -
 SUB               1
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE           1
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             4
 OUTPUT            5
 OUTPUTK           3

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP              6
 JUMP@             -
 CALL              -
 CALL@             -
 RETURN            -
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
